{"version":3,"file":"static/js/41.e31b4757.chunk.js","mappings":"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","sources":["components/LoginPage/LoginPage.js","components/shared/AuthForm/AuthForm.js","utils/validateForm.js"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useLocation, useNavigate } from \"react-router\";\r\nimport { logInUser } from \"../../actions/authActions\";\r\n\r\nimport AuthForm from \"../shared/AuthForm/AuthForm\";\r\n\r\nconst LoginPage = () => {\r\n  const dispatch = useDispatch();\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n\r\n  const logIn = useSelector((state) => state.auth);\r\n  const { loading, user, error } = logIn;\r\n\r\n  useEffect(() => {\r\n    if (user) navigate(location.state?.from ? location.state.from : \"/\");\r\n  }, [user]);\r\n\r\n  const inputConfig = {\r\n    email: {\r\n      value: \"\",\r\n      options: {\r\n        required: true,\r\n        min: 6,\r\n      },\r\n    },\r\n    password: {\r\n      value: \"\",\r\n      options: {\r\n        required: true,\r\n        min: 8,\r\n      },\r\n    },\r\n  };\r\n\r\n  const formSubmit = (formValues) => {\r\n    const { email, password } = formValues;\r\n\r\n    dispatch(\r\n      logInUser({\r\n        email: email.value,\r\n        password: password.value,\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <AuthForm\r\n      type=\"LOGIN\"\r\n      loading={loading}\r\n      inputConfig={inputConfig}\r\n      formSubmit={formSubmit}\r\n      formError={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSpinner, faExclamationCircle } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {\r\n  StyledForm,\r\n  StyledInput,\r\n  StyledInputGroup,\r\n  StyledLabel,\r\n  StyledFormBackground,\r\n  StyledFormWrapper,\r\n} from \"../../../styles/formStyles\";\r\nimport { H2, SpanError, StyledParagraph } from \"../../../styles/fontStyles\";\r\nimport { Button } from \"../../../styles/buttonStyles\";\r\nimport { validateForm } from \"../../../utils/validateForm\";\r\n\r\nconst AuthForm = ({ type, loading, inputConfig, formSubmit, formError }) => {\r\n  const [formValues, setFormValues] = useState(inputConfig);\r\n  const [error, setError] = useState({});\r\n\r\n  const handleChange = (e) => {\r\n    if (error) setError({});\r\n\r\n    setFormValues({\r\n      ...formValues,\r\n      [e.target.name]: {\r\n        value: e.target.value,\r\n        options: { ...formValues[e.target.name].options },\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const errors = validateForm(formValues);\r\n\r\n    if (errors.length > 0) {\r\n      setError(errors[0]);\r\n      return;\r\n    }\r\n\r\n    formSubmit(formValues);\r\n  };\r\n\r\n  return (\r\n    <StyledFormBackground>\r\n      <StyledFormWrapper>\r\n        <H2>{type === \"REGISTER\" ? \"Register\" : \"Sign In\"}</H2>\r\n        <StyledForm onSubmit={handleSubmit}>\r\n          <StyledInputGroup>\r\n            <StyledLabel htmlFor=\"email\">Email:</StyledLabel>\r\n            <StyledInput\r\n              type=\"text\"\r\n              name=\"email\"\r\n              id=\"email\"\r\n              value={formValues.email.value}\r\n              placeholder=\"Email address\"\r\n              onChange={handleChange}\r\n            />\r\n            {error.email && (\r\n              <SpanError>\r\n                <FontAwesomeIcon icon={faExclamationCircle} />\r\n                {error.email}\r\n              </SpanError>\r\n            )}\r\n          </StyledInputGroup>\r\n\r\n          <StyledInputGroup>\r\n            <StyledLabel htmlFor=\"password\">Password:</StyledLabel>\r\n            <StyledInput\r\n              type=\"password\"\r\n              name=\"password\"\r\n              id=\"password\"\r\n              value={formValues.password.value}\r\n              placeholder=\"Password\"\r\n              onChange={handleChange}\r\n            />\r\n            {error.password && (\r\n              <SpanError>\r\n                <FontAwesomeIcon icon={faExclamationCircle} />\r\n                {error.password}\r\n              </SpanError>\r\n            )}\r\n          </StyledInputGroup>\r\n\r\n          {type === \"REGISTER\" && (\r\n            <StyledInputGroup>\r\n              <StyledLabel htmlFor=\"confirmPassword\">Confirm Password:</StyledLabel>\r\n              <StyledInput\r\n                type=\"password\"\r\n                name=\"confirmPassword\"\r\n                id=\"confirmPassword\"\r\n                value={formValues.confirmPassword.value}\r\n                placeholder=\"Confirm Password\"\r\n                onChange={handleChange}\r\n              />\r\n              {error.confirmPassword && (\r\n                <SpanError>\r\n                  <FontAwesomeIcon icon={faExclamationCircle} />\r\n                  {error.confirmPassword}\r\n                </SpanError>\r\n              )}\r\n            </StyledInputGroup>\r\n          )}\r\n\r\n          <Button type=\"primary\" $large disabled={loading} onClick={handleSubmit}>\r\n            {loading ? (\r\n              <>\r\n                <FontAwesomeIcon icon={faSpinner} size=\"lg\" spin />\r\n                {type === \"REGISTER\" ? \"Registering...\" : \"Signing in...\"}\r\n              </>\r\n            ) : type === \"REGISTER\" ? (\r\n              \"Register Account\"\r\n            ) : (\r\n              \"Sign In\"\r\n            )}\r\n          </Button>\r\n        </StyledForm>\r\n\r\n        {type === \"REGISTER\" ? (\r\n          <>\r\n            <StyledParagraph>Already have an account?</StyledParagraph>\r\n            <StyledParagraph>\r\n              <Link to=\"/login\">Sign in!</Link>\r\n            </StyledParagraph>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <StyledParagraph>Don't have an account?</StyledParagraph>\r\n            <StyledParagraph>\r\n              <Link to=\"/register\">Sign up!</Link>\r\n            </StyledParagraph>\r\n          </>\r\n        )}\r\n      </StyledFormWrapper>\r\n    </StyledFormBackground>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","export const validateForm = (formValues) => {\r\n  let errors = {};\r\n\r\n  for (const field in formValues) {\r\n    if (formValues[field].options.required && formValues[field].value === \"\") {\r\n      errors[field] = \"This field is required.\";\r\n    }\r\n\r\n    if (\r\n      formValues[field].options.min &&\r\n      formValues[field].value !== \"\" &&\r\n      formValues[field].value.length < formValues[field].options.min\r\n    ) {\r\n      errors[\r\n        field\r\n      ] = `This field must contain a minimum of ${formValues[field].options.min} characters.`;\r\n    }\r\n  }\r\n\r\n  if (formValues.confirmPassword) {\r\n    if (\r\n      !errors.confirmPassword &&\r\n      formValues.password.value !== formValues.confirmPassword.value\r\n    ) {\r\n      errors.confirmPassword = \"Passwords do not match.\";\r\n    }\r\n  }\r\n\r\n  if (Object.keys(errors).length > 0) {\r\n    return [errors];\r\n  }\r\n\r\n  return [];\r\n};\r\n"],"names":["dispatch","useDispatch","location","useLocation","navigate","useNavigate","logIn","useSelector","state","auth","loading","user","error","useEffect","from","type","inputConfig","email","value","options","required","min","password","formSubmit","formValues","logInUser","formError","useState","setFormValues","setError","handleChange","e","target","name","handleSubmit","preventDefault","errors","field","length","confirmPassword","Object","keys","validateForm","H2","onSubmit","htmlFor","id","placeholder","onChange","icon","faExclamationCircle","$large","disabled","onClick","faSpinner","size","spin","to"],"sourceRoot":""}