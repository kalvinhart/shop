{"version":3,"file":"static/js/157.971a0e7d.chunk.js","mappings":"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","sources":["components/RegisterPage/RegisterPage.js","components/shared/AuthForm/AuthForm.js","utils/validateForm.js"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { registerUser } from \"../../actions/authActions\";\r\n\r\nimport AuthForm from \"../shared/AuthForm/AuthForm\";\r\n\r\nconst RegisterPage = () => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const userRegistration = useSelector((state) => state.auth);\r\n  const { loading, error, user } = userRegistration;\r\n\r\n  useEffect(() => {\r\n    if (user) navigate(\"/\");\r\n  }, [user]);\r\n\r\n  const inputConfig = {\r\n    email: {\r\n      value: \"\",\r\n      options: {\r\n        required: true,\r\n        min: 6,\r\n      },\r\n    },\r\n    password: {\r\n      value: \"\",\r\n      options: {\r\n        required: true,\r\n        min: 8,\r\n      },\r\n    },\r\n    confirmPassword: {\r\n      value: \"\",\r\n      options: {\r\n        required: true,\r\n      },\r\n    },\r\n  };\r\n\r\n  const formSubmit = (formValues) => {\r\n    const { email, password } = formValues;\r\n\r\n    dispatch(\r\n      registerUser({\r\n        email: email.value,\r\n        password: password.value,\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <AuthForm\r\n      type=\"REGISTER\"\r\n      inputConfig={inputConfig}\r\n      formSubmit={formSubmit}\r\n      loading={loading}\r\n      formError={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default RegisterPage;\r\n","import { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSpinner, faExclamationCircle } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {\r\n  StyledForm,\r\n  StyledInput,\r\n  StyledInputGroup,\r\n  StyledLabel,\r\n  StyledFormBackground,\r\n  StyledFormWrapper,\r\n} from \"../../../styles/formStyles\";\r\nimport { H2, SpanError, StyledParagraph } from \"../../../styles/fontStyles\";\r\nimport { Button } from \"../../../styles/buttonStyles\";\r\nimport { validateForm } from \"../../../utils/validateForm\";\r\n\r\nconst AuthForm = ({ type, loading, inputConfig, formSubmit, formError }) => {\r\n  const [formValues, setFormValues] = useState(inputConfig);\r\n  const [error, setError] = useState({});\r\n\r\n  const handleChange = (e) => {\r\n    if (error) setError({});\r\n\r\n    setFormValues({\r\n      ...formValues,\r\n      [e.target.name]: {\r\n        value: e.target.value,\r\n        options: { ...formValues[e.target.name].options },\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const errors = validateForm(formValues);\r\n\r\n    if (errors.length > 0) {\r\n      setError(errors[0]);\r\n      return;\r\n    }\r\n\r\n    formSubmit(formValues);\r\n  };\r\n\r\n  return (\r\n    <StyledFormBackground>\r\n      <StyledFormWrapper>\r\n        <H2>{type === \"REGISTER\" ? \"Register\" : \"Sign In\"}</H2>\r\n        <StyledForm onSubmit={handleSubmit}>\r\n          <StyledInputGroup>\r\n            <StyledLabel htmlFor=\"email\">Email:</StyledLabel>\r\n            <StyledInput\r\n              type=\"text\"\r\n              name=\"email\"\r\n              id=\"email\"\r\n              value={formValues.email.value}\r\n              placeholder=\"Email address\"\r\n              onChange={handleChange}\r\n            />\r\n            {error.email && (\r\n              <SpanError>\r\n                <FontAwesomeIcon icon={faExclamationCircle} />\r\n                {error.email}\r\n              </SpanError>\r\n            )}\r\n          </StyledInputGroup>\r\n\r\n          <StyledInputGroup>\r\n            <StyledLabel htmlFor=\"password\">Password:</StyledLabel>\r\n            <StyledInput\r\n              type=\"password\"\r\n              name=\"password\"\r\n              id=\"password\"\r\n              value={formValues.password.value}\r\n              placeholder=\"Password\"\r\n              onChange={handleChange}\r\n            />\r\n            {error.password && (\r\n              <SpanError>\r\n                <FontAwesomeIcon icon={faExclamationCircle} />\r\n                {error.password}\r\n              </SpanError>\r\n            )}\r\n          </StyledInputGroup>\r\n\r\n          {type === \"REGISTER\" && (\r\n            <StyledInputGroup>\r\n              <StyledLabel htmlFor=\"confirmPassword\">Confirm Password:</StyledLabel>\r\n              <StyledInput\r\n                type=\"password\"\r\n                name=\"confirmPassword\"\r\n                id=\"confirmPassword\"\r\n                value={formValues.confirmPassword.value}\r\n                placeholder=\"Confirm Password\"\r\n                onChange={handleChange}\r\n              />\r\n              {error.confirmPassword && (\r\n                <SpanError>\r\n                  <FontAwesomeIcon icon={faExclamationCircle} />\r\n                  {error.confirmPassword}\r\n                </SpanError>\r\n              )}\r\n            </StyledInputGroup>\r\n          )}\r\n\r\n          <Button type=\"primary\" $large disabled={loading} onClick={handleSubmit}>\r\n            {loading ? (\r\n              <>\r\n                <FontAwesomeIcon icon={faSpinner} size=\"lg\" spin />\r\n                {type === \"REGISTER\" ? \"Registering...\" : \"Signing in...\"}\r\n              </>\r\n            ) : type === \"REGISTER\" ? (\r\n              \"Register Account\"\r\n            ) : (\r\n              \"Sign In\"\r\n            )}\r\n          </Button>\r\n        </StyledForm>\r\n\r\n        {type === \"REGISTER\" ? (\r\n          <>\r\n            <StyledParagraph>Already have an account?</StyledParagraph>\r\n            <StyledParagraph>\r\n              <Link to=\"/login\">Sign in!</Link>\r\n            </StyledParagraph>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <StyledParagraph>Don't have an account?</StyledParagraph>\r\n            <StyledParagraph>\r\n              <Link to=\"/register\">Sign up!</Link>\r\n            </StyledParagraph>\r\n          </>\r\n        )}\r\n      </StyledFormWrapper>\r\n    </StyledFormBackground>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","export const validateForm = (formValues) => {\r\n  let errors = {};\r\n\r\n  for (const field in formValues) {\r\n    if (formValues[field].options.required && formValues[field].value === \"\") {\r\n      errors[field] = \"This field is required.\";\r\n    }\r\n\r\n    if (\r\n      formValues[field].options.min &&\r\n      formValues[field].value !== \"\" &&\r\n      formValues[field].value.length < formValues[field].options.min\r\n    ) {\r\n      errors[\r\n        field\r\n      ] = `This field must contain a minimum of ${formValues[field].options.min} characters.`;\r\n    }\r\n  }\r\n\r\n  if (formValues.confirmPassword) {\r\n    if (\r\n      !errors.confirmPassword &&\r\n      formValues.password.value !== formValues.confirmPassword.value\r\n    ) {\r\n      errors.confirmPassword = \"Passwords do not match.\";\r\n    }\r\n  }\r\n\r\n  if (Object.keys(errors).length > 0) {\r\n    return [errors];\r\n  }\r\n\r\n  return [];\r\n};\r\n"],"names":["dispatch","useDispatch","navigate","useNavigate","userRegistration","useSelector","state","auth","loading","error","user","useEffect","type","inputConfig","email","value","options","required","min","password","confirmPassword","formSubmit","formValues","registerUser","formError","useState","setFormValues","setError","handleChange","e","target","name","handleSubmit","preventDefault","errors","field","length","Object","keys","validateForm","H2","onSubmit","htmlFor","id","placeholder","onChange","icon","faExclamationCircle","$large","disabled","onClick","faSpinner","size","spin","to"],"sourceRoot":""}